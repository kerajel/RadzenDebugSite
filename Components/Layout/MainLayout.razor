@using Microsoft.EntityFrameworkCore
@using RadzenDebugSite.Context
@using RadzenDebugSite.Models
@using System.Linq.Dynamic.Core

@inherits LayoutComponentBase
@inject CookieThemeService CookieThemeService
@inject AppDbContext DbContext

<RadzenComponents />

<RadzenLayout style="grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body';">
    <RadzenBody Expanded="@sidebarExpanded">
        <RadzenRow class="rz-mx-auto rz-px-4 rz-pt-2 rz-pt-md-4 rz-pt-lg-6 rz-pt-xl-12 rz-pb-2 rz-pb-lg-12" Style="max-width: 1440px;">
            <RadzenColumn Size="12">

                <RadzenTabs RenderMode="@TabRenderMode.Client">
                    <Tabs>

                        <RadzenTabsItem Text="Particles_1" Style="margin-right: 5px;">
                            <ProjectParticleUraniumBinCountsChart />
                        </RadzenTabsItem>

                        <RadzenTabsItem Text="Particles_2" Style="margin-right: 5px;">
                            <ProjectParticleUraniumBinCountsChart />
                        </RadzenTabsItem>
                    </Tabs>
                </RadzenTabs>

            </RadzenColumn>
        </RadzenRow>
    </RadzenBody>
</RadzenLayout>

@code {

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadData(new());
    }

    protected List<Series> entries = [];
    protected int totalCount;
    protected bool isLoading;

    public async Task LoadData(LoadDataArgs loadDataArgs)
    {
        isLoading = true;

        var query = Enumerable.Range(0, 50).Select(x => new Series { Id = x + 10000 }).AsQueryable();

        query = string.IsNullOrEmpty(loadDataArgs.Filter) ? query : query.Where(loadDataArgs.Filter);
        query = string.IsNullOrEmpty(loadDataArgs.OrderBy) ? query : query.OrderBy(loadDataArgs.OrderBy);

        entries = await Task.FromResult(query.Take(25).ToList());
        totalCount = await Task.FromResult(query.Count());

        isLoading = false;
    }
}